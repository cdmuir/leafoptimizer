if (number >= 4e3) constants <- c(0.032, 0.8)
Nu <- Nu(number, constants, type)
Nu
D_h
D_w
type
Sh <- Sh(Nu, D_h, D_w, type)
Sh <- function(Nu, D_h, D_w, type) {
# Sh: Sherwood number
# forced convection
if (type = "forced") Sh <- Nu * (D_h / D_w) ^ 0.33
# free convection
if(type = "free") Sh <- Nu * (D_h / D_w) ^ 0.25
Sh
}
Sh <- function(Nu, D_h, D_w, type) {
# Sh: Sherwood number
# forced convection
if (type == "forced") Sh <- Nu * (D_h / D_w) ^ 0.33
# free convection
if(type == "free") Sh <- Nu * (D_h / D_w) ^ 0.25
Sh
}
Sh <- Sh(Nu, D_h, D_w, type)
Sh
RH
number <- Gr(d, T_l, T_a, RH, P = P)
number
d
T_l
T_a
RH
type <- "free"
surface <- "lower"
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
constants
surface
T_l < T_a
surface == "upper" & T_l > T_a
surface == "lower" & T_l < T_a
Nu <- Nu(number, constants, type)
Nu <- function(number, constants, type) {
if (type == "forced") {
# forced convection
# Re: Reynolds number
Re <- number
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
a <- constants[1]
b <- constants[2]
Nu <- a * Re ^ b
}
if (type == "free") {
# free convection
# Gr: Grashof number
Gr <- number
warning("how do I determine which constants for Grashof # to use?")
# c = 0.5, d = 0.25: top surface of leaves warmer than air or bottom surface of leaves cooler than air
# lower surface: c = 0.23, d = 0.25: top surface of leaves cooler than air or bottom surface of leaves warmer than air
a <- constants[1] # using a and b to avoid using 'c' as variable
b <- constants[2]
Nu <- a * Gr ^ b
}
Nu
}
Nu <- Nu(number, constants, type)
Nu
Nu(number, constants, type)
R_abs <- function(S_t, R_l, a_s = 0.8, a_l = 0.97) a_s * S_t + a_l * R_l
R_abs(S_t, R_l)
R_abs(1000, 825) # F&S assumed for sun leaf
R_abs(100, 500) # F&S assumed for shade leaf
R_r <- function(T_a, s = 5.67 * 10^-8, e = 0.97) s * e * T_a ^ 4
R_r(293) # 20 C
P_a <- function(T_l, T_a, P = 101.3246) 3480 * P / ((T_a + T_l) / 2)
D_x <- function(D_0, T_a, T_l, P = 101.3246) {
# Generic function for calculating diffusion coefficients at a given temperature
# Assume temperature is average of T_a and T_l in most cases
D_0 * (((T_a + T_l) / 2) / 273.15) ^ 1.75 * (101.3246 / P)
}
get_nu <- function(number, constants, type) {
if (type == "forced") {
# forced convection
# Re: Reynolds number
Re <- number
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
a <- constants[1]
b <- constants[2]
Nu <- a * Re ^ b
}
if (type == "free") {
# free convection
# Gr: Grashof number
Gr <- number
warning("how do I determine which constants for Grashof # to use?")
# c = 0.5, d = 0.25: top surface of leaves warmer than air or bottom surface of leaves cooler than air
# lower surface: c = 0.23, d = 0.25: top surface of leaves cooler than air or bottom surface of leaves warmer than air
a <- constants[1] # using a and b to avoid using 'c' as variable
b <- constants[2]
Nu <- a * Gr ^ b
}
Nu
}
get_re <- function(d, u, D_m) {
# Reynolds number (forced convection)
# d: leaf characteristic dimension (m)
# u: windspeed (m s^-1)
# D_m: diffusion coefficient for momentum in air (m^2 s^-1)
u * d / D_m
}
p_sl <- function(T_K, P = 101.3246) {
# Goff-Gratch equation (see http://cires1.colorado.edu/~voemel/vp.html)
# T_K: temperature in K
# This assumes P = 1 atm = 101.3246 kPa, otherwise boiling temperature needs to change
# This returns p_sl in hPa
p_sl <- 10 ^ (-7.90298 * (373.16 / T_K - 1) +
5.02808 * log10(373.16 / T_K) -
1.3816e-7 * (10 ^ (11.344 * (1 - T_K / 373.16) - 1)) +
8.1328e-3 * (10 ^ (-3.49149 * (373.16 / T_K - 1)) - 1) +
log10(P * 10))
# Convert from hPa to mol m ^ -3 using ideal gas law
# (p_sl * 100) / (8.314 * T_K)
# Convert to kPa
p_sl / 10
}
T_v <- function(T_K, e, P = 101.3246) {
# T_K: temperature in Kelvin
# e: water vapour pressure in kPa
# P: atmospheric pressure in kPa
T_K / (1 - (e / P) * 0.388)
}
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu <- get_nu(Gr, constants, type)
get_gr <- function(d, T_l, T_a, RH, t_a = 3.66e-3, G = 9.8, P = 101.3246) {
# Grashof number (free convection)
# d: leaf characteristic dimension (m)
# T_l: leaf temperature (K)
# T_a: atmospheric temperature (K)
# T_lv: virtual leaf temperature (K)
# T_av: virtual atmospheric temperature (K)
# RH: relative humidity
# t_a: coefficient of thermal expansion of air (3.66 * 10^-3)
# G: gravitational acceleration (9.8 m s^-2)
# P: air pressure (kPa)
# D_m: diffusion coefficient for momentum in air
# (13.3 m^2 s^-1 at 0C in Monteith and Unger Table A3)
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
D_m <- D_x(D_0 = 13.3, T_a, T_l)
t_a * G * d ^ 3 * (T_lv - T_av) / D_m ^ 2
}
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu <- get_nu(Gr, constants, type)
get_nu <- function(number, constants, type) {
if (type == "forced") {
# forced convection
# Re: Reynolds number
Re <- number
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
a <- constants[1]
b <- constants[2]
Nu <- a * Re ^ b
}
if (type == "free") {
# free convection
# Gr: Grashof number
Gr <- number
# c = 0.5, d = 0.25: top surface of leaves warmer than air or bottom surface of leaves cooler than air
# lower surface: c = 0.23, d = 0.25: top surface of leaves cooler than air or bottom surface of leaves warmer than air
a <- constants[1] # using a and b to avoid using 'c' as variable
b <- constants[2]
Nu <- a * Gr ^ b
}
Nu
}
Nu <- get_nu(Gr, constants, type)
Nu
Sh <- get_sh(Nu, D_h, D_w, type)
get_sh <- function(Nu, D_h, D_w, type) {
# Sh: Sherwood number
# forced convection
if (type == "forced") Sh <- Nu * (D_h / D_w) ^ 0.33
# free convection
if(type == "free") Sh <- Nu * (D_h / D_w) ^ 0.25
Sh
}
Sh <- get_sh(Nu, D_h, D_w, type)
Sh
Sh
get_sh
0.4e4
Nu_forced
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
Re <- get_re(d, u, D_m)
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu_forced <- get_nu(Re, constants, type)
Sh_forced <- get_sh(Nu_forced, D_h, D_w, type)
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu_free <- get_nu(Gr, constants, type)
Sh_free <- get_sh(Nu_free, D_h, D_w, type)
Nu_forced
Nu_free
Nu_forced ^ 3.5
Nu_free ^ 3.5
Nu <- (Nu_forced ^ 3.5 + Nu_free ^ 3.5) ^ (1 / 3.5)
Nu
Nu_forced
Nu_free
Sh_forced
Sh_free
Sh <- (Sh_forced ^ 3.5 + Sh_free ^ 3.5) ^ (1 / 3.5)
Sh_forced
Sh
D_h * Nu / d
warning("no need to calculate Sh in g_h() function")
T_l
T_a
P
c_p
c_p = 1.01
g_h(T_l, T_a, RH, d, u, "lower")
g_h <- function(T_l, T_a, RH, d, u, surface, t_a = 3.66e-3, G = 9.8, P = 101.3246) {
# D_h0 = 1.9e-5: diffusion coefficient of heat in air at 0C and P = 101.3246 kPa (m^2 s^-1)
D_h <- D_x(1.9e-5, T_a, T_l, P = P)
# D_w0 = 21.2: diffusion coefficient of heat in air at 0C and P = 101.3246 kPa (m^2 s^-1)
# Monteith and Unsworth 2013
D_w <- D_x(21.2, T_a, T_l, P = P)
# Forced or free convection? Calculate Archemedes number: Ar = Gr / Re ^ 2
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
Ar <- abs((t_a * G * (T_lv - T_av)) * d / (u ^ 2))
# Cutoffs based on Nobel (2009) pg.344
if (Ar < 0.1) {
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
Re <- get_re(d, u, D_m)
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu <- get_nu(Re, constants, type)
}
if (Ar >= 0.1 & Ar <= 10) {
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
Re <- get_re(d, u, D_m)
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu_forced <- get_nu(Re, constants, type)
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu_free <- get_nu(Gr, constants, type)
Nu <- (Nu_forced ^ 3.5 + Nu_free ^ 3.5) ^ (1 / 3.5)
}
if (Ar > 10) {
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu <- get_nu(Gr, constants, type)
}
D_h * Nu / d
}
g_h(T_l, T_a, RH, d, u, "lower")
(T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
T_a <- 400
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
T_a <- 310
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
T_l
T_a
D_h <- D_x(1.9e-5, T_a, T_l, P = P)
D_h
surface
D_w <- D_x(21.2, T_a, T_l, P = P)
D_w
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
T_lv
T_av
Ar <- abs((t_a * G * (T_lv - T_av)) * d / (u ^ 2))
Ar
d
d <- 1
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
d <- 1; u <- 0.1
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
d <- 0.1; u <- 0.1
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
P_a(T_l, T_a, P)
c_p
g_h(T_l, T_a, RH, d, u, "lower")
(T_l - T_a)
D_x <- function(D_0, T_a, T_l, P = 101.3246) {
# Generic function for calculating diffusion coefficients at a given temperature
# Assume temperature is average of T_a and T_l in most cases
D_0 * (((T_a + T_l) / 2) / 273.15) ^ 1.75 * (101.3246 / P)
}
D_h <- D_x(1.9e-5, T_a, T_l, P = P)
D_h
D_w <- D_x(21.2, T_a, T_l, P = P)
D_w
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_lv
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
T_av
Ar <- abs((t_a * G * (T_lv - T_av)) * d / (u ^ 2))
Ar
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
D_m
Re <- get_re(d, u, D_m)
Re
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu_forced <- get_nu(Re, constants, type)
Nu_forced
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
Gr
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu_free <- get_nu(Gr, constants, type)
Nu_free
Gr
constants
number <- Gr
type
a * Gr ^ b
constants
a <- constants[1] # using a and b to avoid using 'c' as variable
b <- constants[2]
a
b
Nu <- a * Gr ^ b
Nu
Gr ^ b
Gr
b
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_lv
T_av
T_lv - T_av
-1 ^ 0.5
(-1) ^ 0.5
(-1) ^ 1
(-1) ^ 11.2
(-1) ^ 1.2
log(01)
log(-1)
get_gr <- function(d, T_l, T_a, RH, t_a = 3.66e-3, G = 9.8, P = 101.3246) {
# Grashof number (free convection)
# d: leaf characteristic dimension (m)
# T_l: leaf temperature (K)
# T_a: atmospheric temperature (K)
# T_lv: virtual leaf temperature (K)
# T_av: virtual atmospheric temperature (K)
# RH: relative humidity
# t_a: coefficient of thermal expansion of air (3.66 * 10^-3)
# G: gravitational acceleration (9.8 m s^-2)
# P: air pressure (kPa)
# D_m: diffusion coefficient for momentum in air
# (13.3 m^2 s^-1 at 0C in Monteith and Unger Table A3)
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
D_m <- D_x(D_0 = 13.3, T_a, T_l)
abs(t_a * G * d ^ 3 * (T_lv - T_av) / D_m ^ 2)
}
d <- 0.1; u <- 0.1
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
d <- 1; u <- 0.1
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
t_l
T_k
T_l
T_a
T_a <- 290
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "lower") * (T_l - T_a)
P_a(T_l, T_a, P) * c_p * g_h(T_l, T_a, RH, d, u, "upper") * (T_l - T_a)
L
rm(g_b)
get_gb(T_l, T_a, RH, d, u, "lower", t_a, G, P)
get_gb <- function(T_l, T_a, RH, d, u, surface, t_a = 3.66e-3, G = 9.8, P = 101.3246) {
# D_h0 = 1.9e-5: diffusion coefficient of heat in air at 0C and P = 101.3246 kPa (m^2 s^-1)
D_h <- D_x(1.9e-5, T_a, T_l, P = P)
# D_w0 = 21.2: diffusion coefficient of heat in air at 0C and P = 101.3246 kPa (m^2 s^-1)
# Monteith and Unsworth 2013
D_w <- D_x(21.2, T_a, T_l, P = P)
# Forced or free convection? Calculate Archemedes number: Ar = Gr / Re ^ 2
T_lv <- T_v(T_l, p_sl(T_l, P = P), P = P)
T_av <-	T_v(T_a, RH * p_sl(T_a, P = P), P = P)
Ar <- abs((t_a * G * (T_lv - T_av)) * d / (u ^ 2))
# Cutoffs based on Nobel (2009) pg.344
if (Ar < 0.1) {
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
Re <- get_re(d, u, D_m)
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu <- get_nu(Re, constants, type)
Sh <- get_sh(Nu, D_h, D_w, type)
}
if (Ar >= 0.1 & Ar <= 10) {
type <- "forced"
D_m <- D_x(D_0 = 13.3, T_a, T_l)
Re <- get_re(d, u, D_m)
# Re < 4000: a = 0.6, b = 0.5: empirical constants
# Re > 4000: a = 0.032, b = 0.8: empirical constants
if (Re < 4e3) constants <- c(0.6, 0.5)
if (Re >= 4e3) constants <- c(0.032, 0.8)
Nu_forced <- get_nu(Re, constants, type)
Sh_forced <- get_sh(Nu_forced, D_h, D_w, type)
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu_free <- get_nu(Gr, constants, type)
Sh_free <- get_sh(Nu_free, D_h, D_w, type)
Nu <- (Nu_forced ^ 3.5 + Nu_free ^ 3.5) ^ (1 / 3.5)
Sh <- (Sh_forced ^ 3.5 + Sh_free ^ 3.5) ^ (1 / 3.5)
}
if (Ar > 10) {
type <- "free"
Gr <- get_gr(d, T_l, T_a, RH, P = P)
if ((surface == "upper" & T_l > T_a) |
(surface == "lower" & T_l < T_a)) {
constants <- c(0.5, 0.25)
} else {
constants <- c(0.23, 0.25)
}
Nu <- get_nu(Gr, constants, type)
Sh <- get_sh(Nu, D_h, D_w, type)
}
D_w * Sh / d
}
get_gb(T_l, T_a, RH, d, u, "lower", t_a, G, P)
get_gb(T_l, T_a, RH, d, u, "upper", t_a, G, P)
45.04e3
4.504e4
4.504e4 - 41.94 * T_l
g_s <- 0.5
g_c
g_c = 0.01
g_b <- get_gb(T_l, T_a, RH, d, u, "lower", t_a, G, P) +
get_gb(T_l, T_a, RH, d, u, "upper", t_a, G, P)
g_b
1 / (1 / g_s + 1 / g_c) + g_b
h_v * g_t * p (p_sl(T_l, P = P) - RH * p_sl(T_a, P = P))
h_v <- 4.504e4 - 41.94 * T_l
h_v * g_t * p (p_sl(T_l, P = P) - RH * p_sl(T_a, P = P))
g_t <- 1 / (1 / g_s + 1 / g_c) + g_b
h_v * g_t * p (p_sl(T_l, P = P) - RH * p_sl(T_a, P = P))
