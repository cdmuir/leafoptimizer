% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimize_leaf.R
\encoding{UTF-8}
\name{optimize_leaf}
\alias{optimize_leaf}
\title{Optimize leaf photosynthesis}
\usage{
optimize_leaf(traits, carbon_costs, bake_par, constants, enviro_par,
  leaf_par, set_units = TRUE, n_init = 1L, check = TRUE,
  quiet = FALSE, refit = TRUE, max_init = 3L)
}
\arguments{
\item{traits}{A vector of one or more character strings indicating which trait(s) to optimize. Stomatal conductance (\code{g_sc}) and stomatal ratio (\code{logit_sr}) are currently supported.}

\item{carbon_costs}{A named list of resources with their costs in terms of carbon (e.g. mol C / mol H2O). Currently only H2O and SR are supported. See details below.}

\item{bake_par}{A list of temperature response parameters inheriting class \code{bake_par}. This can be generated using the \code{make_bakepar} function.}

\item{constants}{A list of physical constants inheriting class \code{constants}. This can be generated using the \code{make_constants} function.}

\item{enviro_par}{A list of environmental parameters inheriting class \code{enviro_par}. This can be generated using the \code{make_enviropar} function.}

\item{leaf_par}{A list of leaf parameters inheriting class \code{leaf_par}. This can be generated using the \code{make_leafpar} function.}

\item{set_units}{Logical. Should \code{units} be set? The function is faster when FALSE, but input must be in correct units or else results will be incorrect without any warning.}

\item{n_init}{Integer. Number of initial values for each trait to try during optimization. If there are multiple traits, these initial values are crossed. For example, if \code{n_init = 3}, the total number of intitial values sets is 3, 9, 27 for 1, 2, 3 traits, respectively. This significantly increases the time, but may be important if the surface is rugged. Default is 1L.}

\item{check}{Logical. Should arguments checks be done?}

\item{quiet}{Logical. Should messages be displayed?}

\item{refit}{Logical. Should optimization be retried from different starting parameters if it fails to converge? If TRUE, upon failure, \code{n_init} will increment up by 1 until successful convergence or \code{n_init > max_init}.}

\item{max_init}{Integer. If \code{refit = TRUE}, the maximum number \code{n_init} to try.}
}
\value{
A data.frame with the following \code{units} columns \cr

\tabular{ll}{

\bold{Input:} \tab \cr
\cr
\code{C_air} \tab atmospheric CO2 concentration (Pa) \cr
\code{g_mc25} \tab mesophyll conductance to CO2 at 25 °C (\eqn{\mu}mol CO2 / (m\eqn{^2} s Pa)) \cr
\code{g_sc} \tab stomatal conductance to CO2 (\eqn{\mu}mol CO2 / (m\eqn{^2} s Pa)) \cr
\code{g_uc} \tab cuticular conductance to CO2 (\eqn{\mu}mol CO2 / (m\eqn{^2} s Pa)) \cr
\code{gamma_star25} \tab chloroplastic CO2 compensation point at 25 °C (Pa) \cr
\code{J_max25} \tab potential electron transport at 25 °C (\eqn{\mu}mol CO2) / (m\eqn{^2} s) \cr
\code{K_C25} \tab Michaelis constant for carboxylation at 25 °C (\eqn{\mu}mol / mol) \cr
\code{K_O25} \tab Michaelis constant for oxygenation at 25 °C (\eqn{\mu}mol / mol) \cr
\code{k_mc} \tab partition of \eqn{g_\mathrm{mc}}{g_mc} to lower mesophyll (unitless) \cr
\code{k_sc} \tab partition of \eqn{g_\mathrm{sc}}{g_sc} to lower surface (unitless) \cr
\code{k_uc} \tab partition of \eqn{g_\mathrm{uc}}{g_uc} to lower surface (unitless) \cr
\code{leafsize} \tab leaf characteristic dimension (m) \cr
\code{O} \tab atmospheric O2 concentration (kPa) \cr
\code{P} \tab atmospheric pressure (kPa) \cr
\code{phi} \tab initial slope of the response of J to PPFD (unitless) \cr
\code{PPFD} \tab photosynthetic photon flux density (umol quanta / (m\eqn{^2} s)) \cr
\code{R_d25} \tab nonphotorespiratory CO2 release  at 25 °C (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{RH} \tab relative humidity (unitless) \cr
\code{theta_J} \tab curvature factor for light-response curve (unitless) \cr
\code{T_air} \tab air temperature (K) \cr
\code{T_leaf} \tab leaf tempearture (K) \cr
\code{V_cmax25} \tab maximum rate of carboxylation at 25 °C (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{V_tpu25} \tab rate of triose phosphate utilisation at 25 °C (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{wind} \tab wind speed (m / s) \cr
\cr
\bold{Baked Input:} \tab \cr
\cr
\code{g_mc} \tab mesophyll conductance to CO2 at \code{T_leaf} (\eqn{\mu}mol CO2 / (m\eqn{^2} s Pa)) \cr
\code{gamma_star} \tab chloroplastic CO2 compensation point at \code{T_leaf} (Pa) \cr
\code{J_max} \tab potential electron transport at \code{T_leaf} (\eqn{\mu}mol CO2) / (m\eqn{^2} s) \cr
\code{K_C} \tab Michaelis constant for carboxylation at \code{T_leaf} (\eqn{\mu}mol / mol) \cr
\code{K_O} \tab Michaelis constant for oxygenation at \code{T_leaf}(\eqn{\mu}mol / mol) \cr
\code{R_d} \tab nonphotorespiratory CO2 release  at \code{T_leaf} (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{V_cmax} \tab maximum rate of carboxylation at \code{T_leaf} (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{V_tpu} \tab rate of triose phosphate utilisation at \code{T_leaf} (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\cr
\bold{Output:} \tab \cr
\cr
\code{A} \tab photosynthetic rate at \code{C_chl} (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) \cr
\code{C_chl} \tab chloroplastic CO2 concentration where \code{A_supply} intersects \code{A_demand} (Pa) \cr
\code{g_tc} \tab total conductance to CO2 at \code{T_leaf} (\eqn{\mu}mol CO2 / (m\eqn{^2} s Pa)) \cr
\code{value} \tab \code{A_supply} - \code{A_demand} (\eqn{\mu}mol CO2 / (m\eqn{^2} s)) at \code{C_chl} \cr
\code{convergence} \tab convergence code (0 = converged)
}
}
\description{
\code{optimize_leaf}: simulate C3 photosynthesis over a single parameter set
}
\details{
\code{optimize_leaf}: This function optimizes leaf traits using an integrated leaf temperature and C3 photosynthesis model under a set of environmental conditions. The leaf temperature model is described in the \code{\link[tealeaves]{tealeaves}} package. The C3 photosynthesis model is described in the \code{\link[photosynthesis]{photosynthesis-package}} package\cr
\cr
}
\examples{
# Single parameter set with 'optimize_leaf'

bp <- make_bakepar()
cs <- make_constants()
ep <- make_enviropar()
lp <- make_leafpar()
traits <- "g_sc"
carbon_costs <- list(H2O = 1000, SR = 0)
optimize_leaf("g_sc", carbon_costs, bp, cs, ep, lp, n_init = 1L)

}
